import asyncio
import os
import json
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
    CallbackContext
)
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from datetime import datetime
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import pytz

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TOKEN = os.getenv("TOKEN")
SPREADSHEET_NAME = "WorkHours"
WARSAW = pytz.timezone('Europe/Warsaw')

# === Google Sheets ===
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds_json = os.getenv("GOOGLE_CREDS_JSON")
creds = ServiceAccountCredentials.from_json_keyfile_dict(json.loads(creds_json), scope)
client = gspread.authorize(creds)
sheet = client.open(SPREADSHEET_NAME).sheet1

# === –≠—Ç–∞–ø—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ===
NAME, LASTNAME, UNIQUE_ID, HOURS = range(4)

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ===
main_menu_keyboard = ReplyKeyboardMarkup([
    ['üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', 'üïí –í–≤–µ—Å—Ç–∏ —á–∞—Å—ã'],
    ['üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å', '‚ùå –û—Ç–º–µ–Ω–∞']
], resize_keyboard=True)

# === –°–æ–æ–±—â–µ–Ω–∏—è ===
REGISTRATION_DONE_MSG = "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
INVALID_USER_MSG = "‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é."
CANCEL_MSG = "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ."

# === –ö–æ–º–∞–Ω–¥—ã ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu_keyboard
    )

async def register(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    return NAME

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['first_name'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:")
    return LASTNAME

async def get_lastname(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['last_name'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, KW43):")
    return UNIQUE_ID

async def get_unique_id(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.message.from_user.id
    first_name = context.user_data['first_name']
    last_name = context.user_data['last_name']
    unique_id = update.message.text
    today = datetime.now(WARSAW).strftime("%d.%m.%Y")

    values = [str(user_id), first_name, last_name, unique_id, today]
    sheet.append_row(values)

    await update.message.reply_text(REGISTRATION_DONE_MSG, reply_markup=main_menu_keyboard)
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(CANCEL_MSG, reply_markup=main_menu_keyboard)
    return ConversationHandler.END

async def enter_hours(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —á–∞—Å–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:")
    return HOURS

async def save_hours(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    hours = update.message.text

    try:
        hours = float(hours)
        if hours < 0 or hours > 24:
            await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ (–æ—Ç 0 –¥–æ 24).", reply_markup=main_menu_keyboard)
            return HOURS
    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.", reply_markup=main_menu_keyboard)
        return HOURS

    today_col = datetime.now(WARSAW).day + 5
    cell = sheet.find(user_id)
    
    if cell:
        sheet.update_cell(cell.row, today_col, hours)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É–º–º—É —á–∞—Å–æ–≤ –∑–∞ –º–µ—Å—è—Ü
        total_hours = sum(
            float(sheet.cell(cell.row, col).value or 0)
            for col in range(6, today_col + 1)
        )

        sheet.update_cell(cell.row, 4, total_hours)  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü —Å –∏—Ç–æ–≥–æ–≤—ã–º–∏ —á–∞—Å–∞–º–∏
        await update.message.reply_text(f"‚úÖ –ß–∞—Å—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã! –°—É–º–º–∞ –∑–∞ –º–µ—Å—è—Ü: {total_hours} —á.", reply_markup=main_menu_keyboard)
    else:
        await update.message.reply_text(INVALID_USER_MSG, reply_markup=main_menu_keyboard)

    return ConversationHandler.END

async def show_calendar(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    cell = sheet.find(user_id)
    
    if not cell:
        await update.message.reply_text(INVALID_USER_MSG, reply_markup=main_menu_keyboard)
        return

    row = sheet.row_values(cell.row)
    calendar = "üìÖ –í–∞—à–∏ —á–∞—Å—ã –∑–∞ –º–µ—Å—è—Ü:\n"
    total_hours = 0

    for day in range(1, 32):
        col = day + 5
        try:
            value = row[col - 1]
            calendar += f"{day}: {value if value else '-'}\n"
            total_hours += float(value or 0)
        except IndexError:
            calendar += f"{day}: -\n"

    calendar += f"\n**–°—É–º–º–∞ –∑–∞ –º–µ—Å—è—Ü: {total_hours} —á.**"
    await update.message.reply_text(calendar, parse_mode='Markdown', reply_markup=main_menu_keyboard)

async def send_reminders(context: CallbackContext):
    all_records = sheet.get_all_records()
    for record in all_records:
        try:
            user_id = int(record['user_id'])
            await context.bot.send_message(user_id, "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —á–∞—Å–æ–≤!")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è {user_id}: {e}")

async def export_month(context: CallbackContext):
    now = datetime.now(WARSAW)
    if now.day == 31:
        workbook = client.open(SPREADSHEET_NAME)
        old_sheet = workbook.sheet1
        new_sheet = workbook.add_worksheet(title=f"–û—Ç—á—ë—Ç {now.strftime('%B')}", rows="200", cols="50")
        data = old_sheet.get_all_values()
        new_sheet.update('A1', data)

# === –ù–ê–°–¢–†–û–ô–ö–ê –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ===
app = ApplicationBuilder().token(TOKEN).build()

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===
conv_handler = ConversationHandler(
    entry_points=[
        CommandHandler('register', register),
        MessageHandler(filters.Regex('^üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è$'), register)
    ],
    states={
        NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
        LASTNAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_lastname)],
        UNIQUE_ID: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_unique_id)],
    },
    fallbacks=[
        CommandHandler('cancel', cancel),
        MessageHandler(filters.Regex('^‚ùå –û—Ç–º–µ–Ω–∞$'), cancel)
    ]
)

hours_handler = ConversationHandler(
    entry_points=[
        CommandHandler('hours', enter_hours),
        MessageHandler(filters.Regex('^üïí –í–≤–µ—Å—Ç–∏ —á–∞—Å—ã$'), enter_hours)
    ],
    states={
        HOURS: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_hours)]
    },
    fallbacks=[
        CommandHandler('cancel', cancel),
        MessageHandler(filters.Regex('^‚ùå –û—Ç–º–µ–Ω–∞$'), cancel)
    ]
)

app.add_handler(CommandHandler("start", start))
app.add_handler(conv_handler)
app.add_handler(hours_handler)
app.add_handler(CommandHandler("calendar", show_calendar))
app.add_handler(MessageHandler(filters.Regex('^üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å$'), show_calendar))

# === –ü–õ–ê–ù–ò–†–û–í–©–ò–ö –ó–ê–î–ê–ß ===
scheduler = AsyncIOScheduler()
scheduler.add_job(send_reminders, trigger='cron', hour=23, minute=0, timezone=WARSAW)
scheduler.add_job(export_month, trigger='cron', day=31, hour=23, minute=5, timezone=WARSAW)

# === –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ===
async def main():
    scheduler.start()
    await app.run_polling()

# === –ó–ê–ü–£–°–ö ===
if __name__ == "__main__":
    asyncio.run(main())
